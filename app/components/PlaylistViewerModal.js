import React, { useState } from 'react';
import { GENRES, PLAYLISTS } from '../data/music-library';
import jsPDF from 'jspdf';

// Function to determine if a color is light or dark for better text contrast
const isLightColor = (hexColor) => {
  // Remove # if present
  const hex = hexColor.replace('#', '');
  
  // Convert to RGB
  const r = parseInt(hex.substr(0, 2), 16);
  const g = parseInt(hex.substr(2, 2), 16);
  const b = parseInt(hex.substr(4, 2), 16);
  
  // Calculate luminance using the relative luminance formula
  const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
  
  // Return true if light (luminance > 0.5)
  return luminance > 0.5;
};

// Function to get appropriate text color for a background
const getTextColor = (backgroundColor) => {
  return isLightColor(backgroundColor) ? '#1f2937' : '#ffffff'; // dark gray or white
};

export default function PlaylistViewerModal({ isOpen, onClose, selectedSongs, clientName = '' }) {
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);

  if (!isOpen) return null;

  // Group songs by genre for better organization
  const songsByGenre = selectedSongs.reduce((acc, song) => {
    const genreKey = song.genreKey || 'unknown';
    if (!acc[genreKey]) {
      acc[genreKey] = [];
    }
    acc[genreKey].push(song);
    return acc;
  }, {});

  const generatePDF = async () => {
    setIsGeneratingPDF(true);
    
    try {
      // Import jsPDF dynamically to avoid SSR issues
      const { jsPDF } = await import('jspdf');
      
      const doc = new jsPDF();
      const pageWidth = doc.internal.pageSize.width;
      const pageHeight = doc.internal.pageSize.height;
      const margin = 20;
      const lineHeight = 6;
      let yPosition = margin;

      // Helper function to add text with word wrapping
      const addText = (text, x, y, maxWidth, fontSize = 10) => {
        doc.setFontSize(fontSize);
        const lines = doc.splitTextToSize(text, maxWidth);
        doc.text(lines, x, y);
        return y + (lines.length * lineHeight);
      };

      // Header
      doc.setFontSize(20);
      doc.setFont(undefined, 'bold');
      yPosition = addText('DJ Bobby Drake - Custom Playlist', margin, yPosition, pageWidth - 2 * margin, 20);
      yPosition += 5;

      if (clientName) {
        doc.setFontSize(14);
        doc.setFont(undefined, 'normal');
        yPosition = addText(`Client: ${clientName}`, margin, yPosition, pageWidth - 2 * margin, 14);
        yPosition += 5;
      }

      doc.setFontSize(12);
      yPosition = addText(`Generated: ${new Date().toLocaleDateString()}`, margin, yPosition, pageWidth - 2 * margin, 12);
      yPosition = addText(`Total Songs: ${selectedSongs.length}`, margin, yPosition, pageWidth - 2 * margin, 12);
      yPosition += 10;

      // Add line separator
      doc.setLineWidth(0.5);
      doc.line(margin, yPosition, pageWidth - margin, yPosition);
      yPosition += 10;

      // Songs by genre
      Object.entries(songsByGenre).forEach(([genreKey, songs]) => {
        const genre = GENRES[genreKey];
        const playlist = PLAYLISTS[genreKey];
        const genreTitle = genre?.displayName || playlist?.displayName || genreKey || 'Music';

        // Check if we need a new page
        if (yPosition > pageHeight - 40) {
          doc.addPage();
          yPosition = margin;
        }

        // Genre header
        doc.setFontSize(14);
        doc.setFont(undefined, 'bold');
        yPosition = addText(`${genreTitle} (${songs.length} songs)`, margin, yPosition, pageWidth - 2 * margin, 14);
        yPosition += 5;

        // Songs in this genre
        doc.setFontSize(10);
        doc.setFont(undefined, 'normal');
        
        songs.forEach((song, index) => {
          // Check if we need a new page
          if (yPosition > pageHeight - 20) {
            doc.addPage();
            yPosition = margin;
          }

          const songText = `${index + 1}. ${song.title} - ${song.artist}${song.album && song.album !== 'Unknown Album' ? ` (${song.album})` : ''}`;
          yPosition = addText(songText, margin + 10, yPosition, pageWidth - 2 * margin - 10, 10);
        });

        yPosition += 5;
      });

      // Footer
      const footerY = pageHeight - 15;
      doc.setFontSize(8);
      doc.setFont(undefined, 'italic');
      doc.text('Generated by DJ Bobby Drake Contract System', margin, footerY);
      doc.text(`Page ${doc.internal.getNumberOfPages()}`, pageWidth - margin - 20, footerY);

      // Save the PDF
      const fileName = `DJ_Playlist_${clientName ? clientName.replace(/[^a-zA-Z0-9]/g, '_') : 'Custom'}_${new Date().toISOString().split('T')[0]}.pdf`;
      doc.save(fileName);

    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Error generating PDF. Please try again.');
    } finally {
      setIsGeneratingPDF(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl h-[90vh] flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">Your Custom Playlist</h2>
            <p className="text-gray-600 mt-1">
              {selectedSongs.length} songs selected
              {clientName && <span className="ml-2">â€¢ Client: {clientName}</span>}
            </p>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 text-2xl font-bold"
          >
            Ã—
          </button>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-auto p-6">
          {selectedSongs.length === 0 ? (
            <div className="flex items-center justify-center h-full">
              <div className="text-center">
                <div className="text-6xl mb-4">ðŸŽµ</div>
                <p className="text-gray-500 text-lg mb-2">No songs selected</p>
                <p className="text-gray-400">Browse the iTunes library to add songs to your playlist</p>
              </div>
            </div>
          ) : (
            <div className="space-y-6">
              {/* Summary */}
              <div className="bg-blue-50 rounded-lg p-4">
                <h3 className="font-semibold text-blue-900 mb-2">Playlist Summary</h3>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                  <div>
                    <span className="text-blue-600 font-medium">Total Songs:</span>
                    <div className="text-blue-900 font-bold text-lg">{selectedSongs.length}</div>
                  </div>
                  <div>
                    <span className="text-blue-600 font-medium">Genres:</span>
                    <div className="text-blue-900 font-bold text-lg">{Object.keys(songsByGenre).length}</div>
                  </div>
                  <div>
                    <span className="text-blue-600 font-medium">Artists:</span>
                    <div className="text-blue-900 font-bold text-lg">
                      {new Set(selectedSongs.map(song => song.artist)).size}
                    </div>
                  </div>
                  <div>
                    <span className="text-blue-600 font-medium">Est. Duration:</span>
                    <div className="text-blue-900 font-bold text-lg">
                      {Math.round(selectedSongs.length * 3.5)} min
                    </div>
                  </div>
                </div>
              </div>

              {/* Songs by Genre */}
              {Object.entries(songsByGenre).map(([genreKey, songs]) => {
                const genre = GENRES[genreKey];
                const playlist = PLAYLISTS[genreKey];
                const genreTitle = genre?.displayName || playlist?.displayName || genreKey || 'Music';
                const backgroundColor = genre?.color || playlist?.color || '#FF6B6B';
                
                return (
                  <div key={genreKey} className="border rounded-lg overflow-hidden">
                    <div 
                      className="px-4 py-3 font-semibold flex items-center justify-between"
                      style={{ 
                        backgroundColor: backgroundColor,
                        color: getTextColor(backgroundColor)
                      }}
                    >
                      <span>{genreTitle}</span>
                      <span 
                        className="px-2 py-1 rounded text-sm font-medium"
                        style={{
                          backgroundColor: isLightColor(backgroundColor) ? 'rgba(0,0,0,0.15)' : 'rgba(255,255,255,0.2)',
                          color: getTextColor(backgroundColor)
                        }}
                      >
                        {songs.length} songs
                      </span>
                    </div>
                    <div className="divide-y divide-gray-200">
                      {songs.map((song, index) => (
                        <div key={song.id} className="p-4 hover:bg-gray-50">
                          <div className="flex items-start justify-between">
                            <div className="flex-1 min-w-0">
                              <div className="flex items-center gap-3">
                                <span className="text-sm text-gray-500 font-medium w-8">
                                  {index + 1}.
                                </span>
                                <div className="flex-1 min-w-0">
                                  <h4 className="font-medium text-gray-900 truncate">
                                    {song.title}
                                  </h4>
                                  <p className="text-sm text-gray-600 truncate">
                                    {song.artist}
                                    {song.album && song.album !== 'Unknown Album' && (
                                      <span className="text-gray-400"> â€¢ {song.album}</span>
                                    )}
                                  </p>
                                  {song.playCount > 0 && (
                                    <p className="text-xs text-gray-500 mt-1">
                                      {song.playCount} plays in iTunes
                                    </p>
                                  )}
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="p-6 border-t bg-gray-50">
          <div className="flex items-center justify-between">
            <p className="text-sm text-gray-600">
              {selectedSongs.length > 0 
                ? 'Your custom playlist is ready for your event'
                : 'Add songs from the iTunes library to create your playlist'
              }
            </p>
            <div className="flex gap-3">
              <button
                onClick={onClose}
                className="px-6 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Close
              </button>
              {selectedSongs.length > 0 && (
                <button
                  onClick={generatePDF}
                  disabled={isGeneratingPDF}
                  className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                >
                  {isGeneratingPDF ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                      Generating...
                    </>
                  ) : (
                    <>
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                      Download PDF
                    </>
                  )}
                </button>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 